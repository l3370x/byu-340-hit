package core.model;

import static org.easymock.EasyMock.createMock;
import static org.easymock.EasyMock.expect;
import static org.junit.Assert.*;
import gui.reports.productstats.ProductStatsCalculator;

import java.util.Calendar;
import java.util.Date;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import common.util.DateUtils;

public class ProductStatsCalculatorImplTest {

	private ProductStatsCalculator calculator = ProductStatsCalculator.Factory.getInstance();

	Calendar cal;
	
	private Date startDate;
	private Date endDate = DateUtils.currentDate();

	// Mocked Objects
	// Item 1: added today, unremoved
	private Item item1;
	// Item 2: added today, removed today
	private Item item2;
	// Item 3: added two weeks ago, unremoved
	private Item item3;
	// Item 4: added three weeks ago, removed one week ago
	private Item item4;
	// Item 5: added and removed on the same day six weeks ago
	private Item item5;
	// Item 6: added one year ago, unremoved
	private Item item6;
	// Item 7: added one year one day ago, removed one year ago
	private Item item7;
	// Item 8: added three years ago, removed 6 months ago
	private Item item8;
	// Item 9: added two years six months ago, removed 1 year ago
	private Item item9;
	// Item 10: added two years ago, unremoved
	private Item item10;
	// Item 11: added six months ago, unremoved
	private Item item11;
	// Item 12: added one month ago, unremoved
	private Item item12;
	
	Iterable<Item> itemsCurrent;
	Iterable<Item> itemsRemoved;

	@Before
	public void setUp() throws Exception {
		item1 = createMock(Item.class);
		item2 = createMock(Item.class);
		item3 = createMock(Item.class);
		item4 = createMock(Item.class);
		item5 = createMock(Item.class);
		item6 = createMock(Item.class);
		item7 = createMock(Item.class);
		item8 = createMock(Item.class);
		item9 = createMock(Item.class);
		item10 = createMock(Item.class);
		item11 = createMock(Item.class);
		item12 = createMock(Item.class);

		ItemCollection currentItems = new ItemCollection(null);
		currentItems.add(item1);
		currentItems.add(item3);
		currentItems.add(item6);
		currentItems.add(item10);
		currentItems.add(item11);
		currentItems.addItem(item12);

		itemsCurrent = currentItems.getContents();

		ItemCollection removedItems = new ItemCollection(null);
		currentItems.add(item2);
		currentItems.add(item4);
		currentItems.add(item5);
		currentItems.add(item7);
		currentItems.add(item8);
		currentItems.add(item9);

		itemsRemoved = removedItems.getContents();
		
		generateMockResults();
	}

	private void generateMockResults() {
		cal = Calendar.getInstance();
		cal.setTime(endDate);
		expect(item1.getEntryDate()).andReturn(cal.getTime());
		expect(item2.getEntryDate()).andReturn(cal.getTime());
		expect(item2.getExitDate()).andReturn(cal.getTime());
		cal.add(Calendar.DATE, -14);
		expect(item3.getEntryDate()).andReturn(cal.getTime());
		cal.setTime(endDate);
		cal.add(Calendar.DATE, -21);
		expect(item4.getEntryDate()).andReturn(cal.getTime());
		cal.add(Calendar.DATE, 14);
		expect(item4.getExitDate()).andReturn(cal.getTime());
		cal.setTime(endDate);
		cal.add(Calendar.DATE, -42);
		expect(item5.getEntryDate()).andReturn(cal.getTime());
		expect(item5.getExitDate()).andReturn(cal.getTime());
		cal.setTime(endDate);
		cal.add(Calendar.YEAR, -1);
		expect(item6.getEntryDate()).andReturn(cal.getTime());
		cal.setTime(endDate);
		cal.add(Calendar.YEAR, -1);
		cal.add(Calendar.DATE, -1);
		expect(item7.getEntryDate()).andReturn(cal.getTime());
		cal.add(Calendar.DATE, 1);
		expect(item7.getExitDate()).andReturn(cal.getTime());
		cal.setTime(endDate);
		cal.add(Calendar.YEAR, -3);
		expect(item8.getEntryDate()).andReturn(cal.getTime());
		cal.setTime(endDate);
		cal.add(Calendar.MONTH, -6);
		expect(item8.getExitDate()).andReturn(cal.getTime());
		cal.setTime(endDate);
		cal.add(Calendar.YEAR, -2);
		cal.add(Calendar.MONTH, -6);
		expect(item9.getEntryDate()).andReturn(cal.getTime());
		cal.setTime(endDate);
		cal.add(Calendar.YEAR, -1);
		expect(item9.getExitDate()).andReturn(cal.getTime());
		cal.setTime(endDate);
		cal.add(Calendar.YEAR, -1);
		expect(item10.getEntryDate()).andReturn(cal.getTime());
		cal.setTime(endDate);
		cal.add(Calendar.MONTH, -6);
		expect(item11.getEntryDate()).andReturn(cal.getTime());
		cal.setTime(endDate);
		cal.add(Calendar.MONTH, -1);
		expect(item12.getEntryDate()).andReturn(cal.getTime());
	}

	@After
	public void tearDown() throws Exception {
	}

	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception {
	}

	public void setValues(Date startDate) {
		this.startDate = startDate;
		calculator.setValues(startDate, itemsCurrent, itemsRemoved);
	}

	@Test
	public void testCalculateCurrentSupply() {
		cal.setTime(endDate);
		setValues(cal.getTime());
		int result = calculator.calculateCurrentSupply();
		assertEquals(6, result);
		cal.add(Calendar.MONTH, -1);
		setValues(cal.getTime());
		result = calculator.calculateCurrentSupply();
		assertEquals(6, result);
		cal.add(Calendar.MONTH, -49);
		setValues(cal.getTime());
		result = calculator.calculateCurrentSupply();
		assertEquals(6, result);
		cal.add(Calendar.MONTH, -49);
		setValues(cal.getTime());
		result = calculator.calculateCurrentSupply();
		assertEquals(6, result);
		cal.add(Calendar.MONTH, -1);
		setValues(cal.getTime());
		result = calculator.calculateCurrentSupply();
		assertEquals(6, result);
		cal.add(Calendar.MONTH, -1);
		setValues(cal.getTime());
		result = calculator.calculateCurrentSupply();
		assertEquals(6, result);
	}
	/*
	@Test
	public void testCalculateAverageSupply() {
		
	}
	/*
	@Test
	public void testCalculateMinimumSupply() {
		fail("Not yet implemented"); // TODO
	}
	/*
	@Test
	public void testCalculateMaximumSupply() {
		fail("Not yet implemented"); // TODO
	}
	/*
	@Test
	public void testCalculateItemsUsed() {
		fail("Not yet implemented"); // TODO
	}
	/*
	@Test
	public void testCalculateItemsAdded() {
		fail("Not yet implemented"); // TODO
	}
	/*
	@Test
	public void testCalculateAverageAgeUsed() {
		fail("Not yet implemented"); // TODO
	}
	/*
	@Test
	public void testCalculateMaximumAgeUsed() {
		fail("Not yet implemented"); // TODO
	}
	/*
	@Test
	public void testCalculateAverageAgedCurrent() {
		fail("Not yet implemented"); // TODO
	}
	/*
	@Test
	public void testCalculateMaximumAgeCurrent() {
		fail("Not yet implemented"); // TODO
	}
	/*
	@Test
	public void testCalculateDayDifference() {
		fail("Not yet implemented"); // TODO
	}
	/*
	@Test
	public void testGetEarliestDate() {
		fail("Not yet implemented"); // TODO
	}
	/*
	@Test
	public void testGetLatestDate() {
		fail("Not yet implemented"); // TODO
	}
	*/
}
