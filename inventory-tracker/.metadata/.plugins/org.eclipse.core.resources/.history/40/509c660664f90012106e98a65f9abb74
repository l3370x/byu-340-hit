package gui.reports.productstats;

import static org.junit.Assert.*;

import java.util.Calendar;
import java.util.Date;
import java.util.Observer;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import core.model.BarCode;
import core.model.Product;
import core.model.ProductContainer;
import core.model.Quantity;
import core.model.StorageUnit;
import core.model.exception.HITException;

public class ProductStatsCalculatorImplTest {
	
	ProductStatsCalculator calc = ProductStatsCalculator.Factory.newProductStatsCalculator();
	ListOfItems list = new ListOfItems();
	Calendar cal = Calendar.getInstance();
	
	@SuppressWarnings("serial")
	class MockProduct implements Product {

		@SuppressWarnings("rawtypes")
		@Override
		public void wasAddedTo(ProductContainer container) throws HITException {
			// TODO Auto-generated method stub
			
		}

		@SuppressWarnings("rawtypes")
		@Override
		public void wasRemovedFrom(ProductContainer container)
				throws HITException {
			// TODO Auto-generated method stub
			
		}

		@SuppressWarnings("rawtypes")
		@Override
		public void transfer(ProductContainer from, ProductContainer to)
				throws HITException {
			// TODO Auto-generated method stub
			
		}

		@SuppressWarnings("rawtypes")
		@Override
		public ProductContainer getContainer() {
			// TODO Auto-generated method stub
			return null;
		}

		@Override
		public Date getCreationDate() {
			// TODO Auto-generated method stub
			return null;
		}

		@Override
		public BarCode getBarCode() {
			// TODO Auto-generated method stub
			return null;
		}

		@Override
		public String getDescription() {
			// TODO Auto-generated method stub
			return null;
		}

		@Override
		public void setDescription(String description) {
			// TODO Auto-generated method stub
			
		}

		@Override
		public Quantity getSize() {
			// TODO Auto-generated method stub
			return null;
		}

		@Override
		public void setSize(Quantity quantity) {
			// TODO Auto-generated method stub
			
		}

		@Override
		public void setCreationDate(Date d) {
			// TODO Auto-generated method stub
			
		}

		@Override
		public int getShelfLifeInMonths() {
			// TODO Auto-generated method stub
			return 0;
		}

		@Override
		public void setShelfLifeInMonths(int shelfLife) throws HITException {
			// TODO Auto-generated method stub
			
		}

		@Override
		public int get3MonthSupplyQuota() {
			// TODO Auto-generated method stub
			return 0;
		}

		@Override
		public void set3MonthSupplyQuota(int quota) throws HITException {
			// TODO Auto-generated method stub
			
		}

		@Override
		public Iterable<StorageUnit> getStorageUnits() {
			// TODO Auto-generated method stub
			return null;
		}

		@SuppressWarnings("rawtypes")
		@Override
		public Iterable<ProductContainer> getProductContainers() {
			// TODO Auto-generated method stub
			return null;
		}

		@SuppressWarnings("rawtypes")
		@Override
		public ProductContainer getProductContainer(StorageUnit unit) {
			// TODO Auto-generated method stub
			return null;
		}

		@Override
		public void addObs(Observer o) {
			// TODO Auto-generated method stub
			
		}
		
	}
	
	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception {
	}

	@Before
	public void setUp() throws Exception {
		list = new ListOfItems();
		cal.setTime(new Date());
	}

	@After
	public void tearDown() throws Exception {
	}

	@Test
	public void testCalculateCurrentSupply1Month() {
		cal.add(Calendar.MONTH, -1);
		calc.setValues(cal.getTime(), list.returnCurrent(), list.returnRemoved(), null);
		assertEquals(6, calc.calculateCurrentSupply());
	}
	
	@Test
	public void testCalculateCurrentSupply3Month() {
		cal.add(Calendar.MONTH, -3);
		calc.setValues(cal.getTime(), list.returnCurrent(), list.returnRemoved(), null);
		assertEquals(6, calc.calculateCurrentSupply());
	}
	
	@Test
	public void testCalculateCurrentSupply6Month() {
		cal.add(Calendar.MONTH, -6);
		calc.setValues(cal.getTime(), list.returnCurrent(), list.returnRemoved(), null);
		assertEquals(6, calc.calculateCurrentSupply());
	}
	
	@Test
	public void testCalculateCurrentSupply9Month() {
		cal.add(Calendar.MONTH, -9);
		calc.setValues(cal.getTime(), list.returnCurrent(), list.returnRemoved(), null);
		assertEquals(6, calc.calculateCurrentSupply());
	}
	
	@Test
	public void testCalculateCurrentSupply12Month() {
		cal.add(Calendar.MONTH, -12);
		calc.setValues(cal.getTime(), list.returnCurrent(), list.returnRemoved(), null);
		assertEquals(6, calc.calculateCurrentSupply());
	}
	
	@Test
	public void testCalculateAverageSupply1Month() {
		cal.add(Calendar.MONTH, -1);
		calc.setValues(cal.getTime(), list.returnCurrent(), list.returnRemoved(), null);
	}
	
	@Test
	public void testCalculateAverageSupply3Month() {
		cal.add(Calendar.MONTH, -3);
		calc.setValues(cal.getTime(), list.returnCurrent(), list.returnRemoved(), null);
	}
	
	@Test
	public void testCalculateAverageSupply6Month() {
		cal.add(Calendar.MONTH, -6);
		calc.setValues(cal.getTime(), list.returnCurrent(), list.returnRemoved(), null);
	}
	
	@Test
	public void testCalculateAverageSupply9Month() {
		cal.add(Calendar.MONTH, -9);
		calc.setValues(cal.getTime(), list.returnCurrent(), list.returnRemoved(), null);
	}
	
	@Test
	public void testCalculateAverageSupply12Month() {
		cal.add(Calendar.MONTH, -12);
		calc.setValues(cal.getTime(), list.returnCurrent(), list.returnRemoved(), null);
	}
	/*
	@Test
	public void testCalculateMinimumSupply() {
		fail("Not yet implemented"); // TODO
	}
	/*
	@Test
	public void testCalculateMaximumSupply() {
		fail("Not yet implemented"); // TODO
	}
	/*
	@Test
	public void testCalculateItemsUsed() {
		fail("Not yet implemented"); // TODO
	}
	/*
	@Test
	public void testCalculateItemsAdded() {
		fail("Not yet implemented"); // TODO
	}
	/*
	@Test
	public void testCalculateAverageAgeUsed() {
		fail("Not yet implemented"); // TODO
	}
	/*
	@Test
	public void testCalculateMaximumAgeUsed() {
		fail("Not yet implemented"); // TODO
	}
	/*
	@Test
	public void testCalculateAverageAgedCurrent() {
		fail("Not yet implemented"); // TODO
	}
	/*
	@Test
	public void testCalculateMaximumAgeCurrent() {
		fail("Not yet implemented"); // TODO
	}
	/*
	@Test
	public void testCalculateDayDifference() {
		fail("Not yet implemented"); // TODO
	}
	/*
	@Test
	public void testGetEarliestDate() {
		fail("Not yet implemented"); // TODO
	}
	/*
	@Test
	public void testGetLatestDate() {
		fail("Not yet implemented"); // TODO
	}
	*/
}
